var searchIndex = JSON.parse('{\
"create_fs":{"doc":"","t":"F","n":["main"],"q":["create_fs"],"d":[""],"i":[0],"f":[[[],[[2,[1]]]]],"p":[[3,"Error"],[4,"Result"]]},\
"cs377_filesystem":{"doc":"","t":"ARDLLLLLLLLLLLLLLL","n":["myfs","BLOCK_SIZE","MyFileSystem","borrow","borrow_mut","close_disk","create_file","delete_file","fmt","from","into","ls","new","read","try_from","try_into","type_id","write"],"q":["cs377_filesystem","cs377_filesystem::myfs","","","","","","","","","","","","","","","",""],"d":["","","","","","","Creates a file in the filesystem with name capped at 8 …","Deletes a file from the filesystem by marking the inode as …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Prints all current files in the filesystem Usage:","Simply the equivalent of the constructor in Rust. Work …","Reads block block_num out of file and returns Ok(contents) …","","","","Writes to block block_num of file and returns Ok(()) if …"],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,[[]],[[]],[1],[[1,2],[[4,[3]]]],[1,[[4,[3]]]],[[1,5],6],[[]],[[]],[1],[7,1],[[1,2],[[4,[3]]]],[[],4],[[],4],[[],8],[[1,2],[[4,[3]]]]],"p":[[3,"MyFileSystem"],[15,"u8"],[3,"String"],[4,"Result"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"TypeId"]]},\
"fs_app":{"doc":"","t":"RRFFF","n":["BUFF","BUFFER_SIZE","do_file_op","get_filename_array","main"],"q":["fs_app","","","",""],"d":["","","","",""],"i":[0,0,0,0,0],"f":[0,0,[[1,2]],[3],[[]]],"p":[[3,"MyFileSystem"],[3,"String"],[15,"str"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
